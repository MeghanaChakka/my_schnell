#include <stdio.h>
#include <assert.h>
#define MAX 100

// Auxillary storage to be used while merging
int result[MAX]; // result is array to store the output (parallel to arr)

// function prototypes
void merge(int arr[], int start1, int end1, int start2, int end2);

/* merge_sort : to sort the numbers in range 0..n-1 (both inclusive) */
void recursive_mergesort(int arr[ ], int start, int end)
{
  int mid;
  int n; // number of items

  n = end-start+1;
  mid = (start + end) / 2;

  /* Approach
   *
   *  1)We break the array into two parts  part1) start..mid part2) mid+1..end
   *  2)We sort the two parts recursively
   *  3)We merge the two parts
   *
   */

   // if we have less than two elements, nothing to do
   if (n < 2)
      return;

   // recursive_sort each part. merge the two sorted parts
   recursive_mergesort(arr, start, mid);
   recursive_mergesort(arr, mid+1, end);

   // merge the two sorted parts
   merge(arr, start, mid, mid+1, end);
}

/* Merges the two parts start1..end1 (both inclusive) and
 *   start2..end2 (both inclusive)
 * Utilizes the "results" auxillary storage for doing the merging, and then
 *   copies the result back into "arr"
 */
void merge(int arr[], int start1, int end1, int start2, int end2)
{
   int i,j,k;


   // Note that technically, we can remove start2 from argument list
   assert(start2 == end1 + 1);

   k = start1;
   i = start1;
   j = start2;

   // while there are elements in both lists, keep picking the smaller one
   while ((i<=end1) && (j<=end2))
   {
     if (arr[i] <= arr[j])
     {
        result[k] = arr[i];
        i++;
        k++;
     }
     else
     {
        result[k] = arr[j];
        j++;
        k++;
     }
   }

   // one of the lists would have been finished. append the other list at end
   // Remaining part of List 1
   while (i <= end1)
   {
      result[k] = arr[i];
      i++;
      k++;
   }
   // Remaining part of List 2
   while (j <= end2)
   {
      result[k] = arr[j];
      j++;
      k++;
   }

   assert(i==end1+1);
   assert(j==end2+1);
   assert(k==end2+1);

   // Copy the merged list back to the input array
   for(i=start1; i <= end2; i++)
     arr[i] = result[i];
}

/* Main function */
int main()
{

  int arr[MAX] = { 5, 4, 9, 2, 3 };
  int num = 5;
  int i;

  printf("Enter number of elements:\n");
  scanf("%d", &num);
  printf("Enter the elements:\n");
  for(i=0;i<num;i++)
    scanf("%d", &arr[i]);

  printf("The array before calling sort\n");
  for(i=0;i<num;i++)
    printf("%d ", arr[i]);
  printf("\n");

  recursive_mergesort(arr, 0, num-1);

  printf("The array after calling sort\n");
  for(i=0;i<num;i++)
    printf("%d ", arr[i]);
  printf("\n");

  return 0;
}
